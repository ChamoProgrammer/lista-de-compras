{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","itemName","quantity","isSelected","items","setItems","inputValue","setInputValue","totalItemCount","setTotalItemCount","handleQuantityIncrease","index","newItems","calculateTotal","reduce","total","item","className","value","onChange","event","target","placeholder","onClick","newItem","handleAddButtonClick","map","toggleComplete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAmHeA,MAzGf,WAAe,MAGaC,mBAAS,CACjC,CAAEC,SAAU,SAAUC,SAAU,EAAGC,YAAY,GAC/C,CAAEF,SAAU,SAAUC,SAAU,EAAGC,YAAY,GAC/C,CAAEF,SAAU,SAAUC,SAAU,EAAGC,YAAY,KANpC,mBAGNC,EAHM,KAGCC,EAHD,OASuBL,mBAAS,IAThC,mBASNM,EATM,KASMC,EATN,OAU+BP,mBAAS,GAVxC,mBAUNQ,EAVM,KAUUC,EAVV,KA0BPC,EAAyB,SAACC,GAC/B,IAAMC,EAAQ,YAAOR,GAErBQ,EAASD,GAAOT,WAEhBG,EAASO,GACTC,KAoBKA,EAAiB,WACtB,IAAML,EAAiBJ,EAAMU,QAAO,SAACC,EAAOC,GAC3C,OAAOD,EAAQC,EAAKd,WAClB,GAEHO,EAAkBD,IAInB,OACD,sBAAKS,UAAU,iBAAf,UAEA,sBAAKA,UAAU,eAAf,UACA,uBAAOC,MAAOZ,EAAYa,SAAU,SAACC,GAAD,OAAWb,EAAca,EAAMC,OAAOH,QAAQD,UAAU,iBAAiBK,YAAY,mBACzH,cAAC,IAAD,CAASC,QAAS,kBAtDY,WAC5B,IAAMC,EAAU,CACfvB,SAAUK,EACVJ,SAAU,EACVC,YAAY,GAGPS,EAAQ,sBAAOR,GAAP,CAAcoB,IAE5BnB,EAASO,GACTL,EAAc,IACdM,IA2CsBY,MAFxB,UAKG,sBAAKR,UAAU,YAAf,UACE,gEAEJb,EAAMsB,KAAI,SAACV,EAAML,GAAP,OACV,sBAAKM,UAAU,iBAAf,UACI,qBAAKA,UAAU,YAAYM,QAAS,kBA9BjB,SAACZ,GACvB,IAAMC,EAAQ,YAAOR,GAErBQ,EAASD,GAAOR,YAAcS,EAASD,GAAOR,WAE9CE,EAASO,GAyBoCe,CAAehB,IAAzD,SAEAK,EAAKb,WACN,qCACC,cAAC,IAAD,IACA,sBAAMc,UAAU,YAAhB,SAA6BD,EAAKf,cAGnC,qCACC,cAAC,IAAD,IACA,+BAAOe,EAAKf,gBAIf,sBAAKgB,UAAU,WAAf,UACC,mCACC,cAAC,IAAD,CAAiBM,QAAS,kBAAMb,EAAuBC,MADxD,SAGA,qCAAQK,EAAKd,SAAb,OACA,mCACC,cAAC,IAAD,CAAkBqB,QAAS,kBAAMb,EAAuBC,MADzD,kBAMH,sBAAKM,UAAU,QAAf,oBAA+BT,YCjGjBoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b723e056.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faChevronRight, faChevronLeft, faCircle, faCheckCircle, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport AddIcon from '@material-ui/icons/Add';\nimport './App.css';\n\nfunction App() {\n\n  // Vamos a inicializar esto con un array de objetos. Luego usaremos la función de mapa para recorrer esta lista y mostrar los elementos.\n  const [items, setItems] = useState([\n    { itemName: 'item 1', quantity: 1, isSelected: false }, //isSelectes---es Una bandera que usaremos para mostrar una \"marca\" o un \"círculo vacío\"\n    { itemName: 'item 2', quantity: 3, isSelected: true },\n    { itemName: 'item 3', quantity: 2, isSelected: false },\n  ]);\n\n  const [inputValue, setInputValue] = useState('');\n  const [totalItemCount, setTotalItemCount] = useState(6);\n\n  const handleAddButtonClick = () => {\n\t  const newItem = {\n\t\t  itemName: inputValue,\n\t\t  quantity: 1,\n\t\t  isSelected: false,\n\t  };\n\n\t  const newItems = [...items, newItem];\n\n\t  setItems(newItems);\n\t  setInputValue('');\n\t  calculateTotal();\n  };\n\n  const handleQuantityIncrease = (index) => {\n\t  const newItems = [...items];\n\n\t  newItems[index].quantity++;\n\n\t  setItems(newItems);\n\t  calculateTotal();\n  };\n\n  const handleQuantityDecrease = (index) => {\n\t  const newItems = [...items];\n\n\t  newItems[index].quantity--;\n\n\t  setItems(newItems);\n\t  calculateTotal();\n  };\n\n  const toggleComplete = (index) => {\n\t  const newItems = [...items];\n\n\t  newItems[index].isSelected = !newItems[index].isSelected;\n\n\t  setItems(newItems);\n  };\n\n  const calculateTotal = () => {\n\t  const totalItemCount = items.reduce((total, item) => {\n\t\t  return total + item.quantity;\n\t  }, 0);\n\n\t  setTotalItemCount(totalItemCount);\n  };\n\n\n  return (\n\t<div className='app-background'>\n\t\t{/* dejaremos que el usuario agregue algunos elementos a la lista. */}\n\t<div className='add-item-box'>\n\t<input value={inputValue} onChange={(event) => setInputValue(event.target.value)} className='add-item-input' placeholder='Add an item...' />\n\t<AddIcon onClick={() => handleAddButtonClick()}/> \t\t\t{/* esto agregara lo que deseemos */}\n</div>\n\n    <div className='item-list'>\n      <h1>aplicacion de lista de compras</h1>\n\t  \n\t{items.map((item, index) => (\n\t\t<div className='item-container'>\n\t\t    <div className='item-name' onClick={() => toggleComplete(index)}>\n\t\t\t\t{/* // ...other code\t\t\t\t */}\n\t\t\t\t\t{item.isSelected ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<CheckCircleIcon/>\n\t\t\t\t\t\t<span className='completed'>{item.itemName}</span>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<FiberManualRecordIcon/>\n\t\t\t\t\t\t<span>{item.itemName}</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className='quantity'>\n\t\t\t\t<button>\n\t\t\t\t\t<ChevronLeftIcon onClick={() => handleQuantityIncrease(index)}/> \t\t{/* actualiza las cantidades del lado izquierdo*/}\n\t\t\t\t</button>\n\t\t\t\t<span> {item.quantity} </span>\n\t\t\t\t<button>\n\t\t\t\t\t<ChevronRightIcon onClick={() => handleQuantityIncrease(index)}/>\t\t\t{/* actualiza las cantidades del lado derecho*/}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t))}\n\t<div className='total'>Total: {totalItemCount}</div>\n\t</div>\n</div>\n  );\n}\n\nexport default App;\n\n// Hemos introducido la función de mapa. Recorrerá los elementos de la matriz de elementos y mostrará un montón de JSX para cada elemento .\n//  Recuerde, la función de mapa nos da el objeto actual en el que se encuentra actualmente como una variable para que podamos acceder a sus propiedades.\n\n// Estamos usando un ternario para verificar la variable item.isSelected . Si la variable es verdadera, mostramos una \"marca\" tachada. Si el valor es falso, mostramos un \"círculo vacío\" junto con el nombre del elemento.\n\n// También mostramos la cantidad de ese artículo en particular.\n{/*  */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}